{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: (email, password) => api.post('/auth/login', {\n    email,\n    password\n  }),\n  register: userData => api.post('/auth/register', userData),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: profileData => api.put('/auth/profile', profileData),\n  changePassword: (currentPassword, newPassword) => api.put('/auth/change-password', {\n    currentPassword,\n    newPassword\n  }),\n  getUsers: params => api.get('/auth/users', {\n    params\n  }),\n  updateUserStatus: (userId, isActive) => api.put(`/auth/users/${userId}/status`, {\n    isActive\n  }),\n  getStudents: () => api.get('/auth/students'),\n  assignStudents: (teacherId, studentIds) => api.post(`/auth/teachers/${teacherId}/students`, {\n    studentIds\n  })\n};\n\n// Game API\nexport const gameAPI = {\n  startGame: gameData => api.post('/game/start', gameData),\n  submitAnswer: (sessionId, questionIndex, answer, timeSpent) => api.post(`/game/${sessionId}/answer`, {\n    questionIndex,\n    answer,\n    timeSpent\n  }),\n  useHint: (sessionId, questionIndex) => api.post(`/game/${sessionId}/hint`, {\n    questionIndex\n  }),\n  completeGame: sessionId => api.post(`/game/${sessionId}/complete`),\n  abandonGame: sessionId => api.post(`/game/${sessionId}/abandon`),\n  getGameHistory: params => api.get('/game/history', {\n    params\n  }),\n  getLeaderboard: params => api.get('/game/leaderboard', {\n    params\n  }),\n  getStats: () => api.get('/game/stats'),\n  getActiveGame: () => api.get('/game/active')\n};\n\n// Word API\nexport const wordAPI = {\n  getWords: params => api.get('/words', {\n    params\n  }),\n  getRandomWords: params => api.get('/words/random', {\n    params\n  }),\n  searchWords: params => api.get('/words/search', {\n    params\n  }),\n  getWord: id => api.get(`/words/${id}`),\n  createWord: wordData => api.post('/words', wordData),\n  updateWord: (id, wordData) => api.put(`/words/${id}`, wordData),\n  deleteWord: id => api.delete(`/words/${id}`),\n  getWordStats: () => api.get('/words/stats/overview'),\n  bulkImportWords: words => api.post('/words/bulk-import', {\n    words\n  }),\n  getFilterMetadata: () => api.get('/words/meta/filters')\n};\n\n// Task API\nexport const taskAPI = {\n  createTask: taskData => api.post('/tasks', taskData),\n  assignTask: (taskId, studentIds) => api.post(`/tasks/${taskId}/assign`, {\n    studentIds\n  }),\n  getTeacherTasks: params => api.get('/tasks/teacher', {\n    params\n  }),\n  getStudentTasks: params => api.get('/tasks/student', {\n    params\n  }),\n  getTask: taskId => api.get(`/tasks/${taskId}`),\n  updateTask: (taskId, taskData) => api.put(`/tasks/${taskId}`, taskData),\n  updateStudentProgress: (taskId, studentId, progressData) => api.put(`/tasks/${taskId}/student/${studentId}`, progressData),\n  submitTask: (taskId, submissionData) => api.post(`/tasks/${taskId}/submit`, submissionData),\n  getTaskStats: taskId => api.get(`/tasks/${taskId}/stats`),\n  deleteTask: taskId => api.delete(`/tasks/${taskId}`),\n  getAllTasks: params => api.get('/tasks', {\n    params\n  }),\n  checkOverdueTasks: () => api.post('/tasks/check-overdue')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","email","password","post","register","userData","getProfile","get","updateProfile","profileData","put","changePassword","currentPassword","newPassword","getUsers","params","updateUserStatus","userId","isActive","getStudents","assignStudents","teacherId","studentIds","gameAPI","startGame","gameData","submitAnswer","sessionId","questionIndex","answer","timeSpent","useHint","completeGame","abandonGame","getGameHistory","getLeaderboard","getStats","getActiveGame","wordAPI","getWords","getRandomWords","searchWords","getWord","id","createWord","wordData","updateWord","deleteWord","delete","getWordStats","bulkImportWords","words","getFilterMetadata","taskAPI","createTask","taskData","assignTask","taskId","getTeacherTasks","getStudentTasks","getTask","updateTask","updateStudentProgress","studentId","progressData","submitTask","submissionData","getTaskStats","deleteTask","getAllTasks","checkOverdueTasks"],"sources":["C:/Users/sanga/Desktop/App/Web/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: (email, password) => api.post('/auth/login', { email, password }),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  getProfile: () => api.get('/auth/profile'),\r\n  updateProfile: (profileData) => api.put('/auth/profile', profileData),\r\n  changePassword: (currentPassword, newPassword) => \r\n    api.put('/auth/change-password', { currentPassword, newPassword }),\r\n  getUsers: (params) => api.get('/auth/users', { params }),\r\n  updateUserStatus: (userId, isActive) => \r\n    api.put(`/auth/users/${userId}/status`, { isActive }),\r\n  getStudents: () => api.get('/auth/students'),\r\n  assignStudents: (teacherId, studentIds) => \r\n    api.post(`/auth/teachers/${teacherId}/students`, { studentIds }),\r\n};\r\n\r\n// Game API\r\nexport const gameAPI = {\r\n  startGame: (gameData) => api.post('/game/start', gameData),\r\n  submitAnswer: (sessionId, questionIndex, answer, timeSpent) => \r\n    api.post(`/game/${sessionId}/answer`, { questionIndex, answer, timeSpent }),\r\n  useHint: (sessionId, questionIndex) => \r\n    api.post(`/game/${sessionId}/hint`, { questionIndex }),\r\n  completeGame: (sessionId) => api.post(`/game/${sessionId}/complete`),\r\n  abandonGame: (sessionId) => api.post(`/game/${sessionId}/abandon`),\r\n  getGameHistory: (params) => api.get('/game/history', { params }),\r\n  getLeaderboard: (params) => api.get('/game/leaderboard', { params }),\r\n  getStats: () => api.get('/game/stats'),\r\n  getActiveGame: () => api.get('/game/active'),\r\n};\r\n\r\n// Word API\r\nexport const wordAPI = {\r\n  getWords: (params) => api.get('/words', { params }),\r\n  getRandomWords: (params) => api.get('/words/random', { params }),\r\n  searchWords: (params) => api.get('/words/search', { params }),\r\n  getWord: (id) => api.get(`/words/${id}`),\r\n  createWord: (wordData) => api.post('/words', wordData),\r\n  updateWord: (id, wordData) => api.put(`/words/${id}`, wordData),\r\n  deleteWord: (id) => api.delete(`/words/${id}`),\r\n  getWordStats: () => api.get('/words/stats/overview'),\r\n  bulkImportWords: (words) => api.post('/words/bulk-import', { words }),\r\n  getFilterMetadata: () => api.get('/words/meta/filters'),\r\n};\r\n\r\n// Task API\r\nexport const taskAPI = {\r\n  createTask: (taskData) => api.post('/tasks', taskData),\r\n  assignTask: (taskId, studentIds) => \r\n    api.post(`/tasks/${taskId}/assign`, { studentIds }),\r\n  getTeacherTasks: (params) => api.get('/tasks/teacher', { params }),\r\n  getStudentTasks: (params) => api.get('/tasks/student', { params }),\r\n  getTask: (taskId) => api.get(`/tasks/${taskId}`),\r\n  updateTask: (taskId, taskData) => api.put(`/tasks/${taskId}`, taskData),\r\n  updateStudentProgress: (taskId, studentId, progressData) => \r\n    api.put(`/tasks/${taskId}/student/${studentId}`, progressData),\r\n  submitTask: (taskId, submissionData) => \r\n    api.post(`/tasks/${taskId}/submit`, submissionData),\r\n  getTaskStats: (taskId) => api.get(`/tasks/${taskId}/stats`),\r\n  deleteTask: (taskId) => api.delete(`/tasks/${taskId}`),\r\n  getAllTasks: (params) => api.get('/tasks', { params }),\r\n  checkOverdueTasks: () => api.post('/tasks/check-overdue'),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}