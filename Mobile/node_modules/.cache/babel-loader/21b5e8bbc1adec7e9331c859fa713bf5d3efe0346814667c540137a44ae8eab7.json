{"ast":null,"code":"// Mobile/src/services/api.js\nimport axios from 'axios';\nimport * as SecureStore from 'expo-secure-store';\nconst api = axios.create({\n  baseURL: process.env.EXPO_PUBLIC_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(async config => {\n  const token = await SecureStore.getItemAsync('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor with proper error handling\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear invalid token\n    await AsyncStorage.removeItem('token');\n    // Navigate to login\n    // You'll need to implement navigation reference\n  }\n  return Promise.reject(error);\n});\n\n// export default api; // Removed duplicate default export\n\n// Game API functions\nexport const gameAPI = {\n  // Start a new game\n  startGame: gameData => api.post('/game/start-game', gameData),\n  // Submit answer\n  submitAnswer: answerData => api.post('/game/submit-answer', answerData),\n  // Complete game\n  completeGame: sessionId => api.post('/game/complete-game', {\n    sessionId\n  }),\n  // Get game history\n  getGameHistory: (params = {}) => api.get('/game/history', {\n    params\n  }),\n  // Get leaderboard\n  getLeaderboard: (limit = 10) => api.get('/game/leaderboard', {\n    params: {\n      limit\n    }\n  }),\n  // Get user stats\n  getUserStats: () => api.get('/game/stats')\n};\n\n// Word API functions\nexport const wordAPI = {\n  // Get all words\n  getWords: (params = {}) => api.get('/words', {\n    params\n  }),\n  // Get word by ID\n  getWord: id => api.get(`/words/${id}`),\n  // Get word statistics\n  getWordStats: () => api.get('/words/stats/overview')\n};\n\n// Auth API functions\nexport const authAPI = {\n  // Register user\n  register: userData => api.post('/auth/register', userData),\n  // Login user\n  login: credentials => api.post('/auth/login', credentials)\n};\nexport default api;","map":{"version":3,"names":["axios","SecureStore","api","create","baseURL","process","env","EXPO_PUBLIC_API_URL","headers","interceptors","request","use","config","token","getItemAsync","Authorization","error","Promise","reject","response","_error$response","status","AsyncStorage","removeItem","gameAPI","startGame","gameData","post","submitAnswer","answerData","completeGame","sessionId","getGameHistory","params","get","getLeaderboard","limit","getUserStats","wordAPI","getWords","getWord","id","getWordStats","authAPI","register","userData","login","credentials"],"sources":["C:/Users/sanga/Desktop/App/Mobile/src/services/api.js"],"sourcesContent":["// Mobile/src/services/api.js\nimport axios from 'axios';\nimport * as SecureStore from 'expo-secure-store';\n\nconst api = axios.create({\n  baseURL: process.env.EXPO_PUBLIC_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  async (config) => {\n    const token = await SecureStore.getItemAsync('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response interceptor with proper error handling\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    if (error.response?.status === 401) {\n      // Clear invalid token\n      await AsyncStorage.removeItem('token');\n      // Navigate to login\n      // You'll need to implement navigation reference\n    }\n    return Promise.reject(error);\n  }\n);\n\n// export default api; // Removed duplicate default export\n\n// Game API functions\nexport const gameAPI = {\n  // Start a new game\n  startGame: (gameData) => api.post('/game/start-game', gameData),\n  \n  // Submit answer\n  submitAnswer: (answerData) => api.post('/game/submit-answer', answerData),\n  \n  // Complete game\n  completeGame: (sessionId) => api.post('/game/complete-game', { sessionId }),\n  \n  // Get game history\n  getGameHistory: (params = {}) => api.get('/game/history', { params }),\n  \n  // Get leaderboard\n  getLeaderboard: (limit = 10) => api.get('/game/leaderboard', { params: { limit } }),\n  \n  // Get user stats\n  getUserStats: () => api.get('/game/stats'),\n};\n\n// Word API functions\nexport const wordAPI = {\n  // Get all words\n  getWords: (params = {}) => api.get('/words', { params }),\n  \n  // Get word by ID\n  getWord: (id) => api.get(`/words/${id}`),\n  \n  // Get word statistics\n  getWordStats: () => api.get('/words/stats/overview'),\n};\n\n// Auth API functions\nexport const authAPI = {\n  // Register user\n  register: (userData) => api.post('/auth/register', userData),\n  \n  // Login user\n  login: (credentials) => api.post('/auth/login', credentials),\n};\n\nexport default api;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,mBAAmB,IAAI,2BAA2B;EACvEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1B,MAAOC,MAAM,IAAK;EAChB,MAAMC,KAAK,GAAG,MAAMZ,WAAW,CAACa,YAAY,CAAC,OAAO,CAAC;EACrD,IAAID,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACO,aAAa,GAAG,UAAUF,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAd,GAAG,CAACO,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACA,MAAMC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IACtC;IACA;EACF;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;;AAEA;AACA,OAAO,MAAMQ,OAAO,GAAG;EACrB;EACAC,SAAS,EAAGC,QAAQ,IAAKxB,GAAG,CAACyB,IAAI,CAAC,kBAAkB,EAAED,QAAQ,CAAC;EAE/D;EACAE,YAAY,EAAGC,UAAU,IAAK3B,GAAG,CAACyB,IAAI,CAAC,qBAAqB,EAAEE,UAAU,CAAC;EAEzE;EACAC,YAAY,EAAGC,SAAS,IAAK7B,GAAG,CAACyB,IAAI,CAAC,qBAAqB,EAAE;IAAEI;EAAU,CAAC,CAAC;EAE3E;EACAC,cAAc,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK/B,GAAG,CAACgC,GAAG,CAAC,eAAe,EAAE;IAAED;EAAO,CAAC,CAAC;EAErE;EACAE,cAAc,EAAEA,CAACC,KAAK,GAAG,EAAE,KAAKlC,GAAG,CAACgC,GAAG,CAAC,mBAAmB,EAAE;IAAED,MAAM,EAAE;MAAEG;IAAM;EAAE,CAAC,CAAC;EAEnF;EACAC,YAAY,EAAEA,CAAA,KAAMnC,GAAG,CAACgC,GAAG,CAAC,aAAa;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMI,OAAO,GAAG;EACrB;EACAC,QAAQ,EAAEA,CAACN,MAAM,GAAG,CAAC,CAAC,KAAK/B,GAAG,CAACgC,GAAG,CAAC,QAAQ,EAAE;IAAED;EAAO,CAAC,CAAC;EAExD;EACAO,OAAO,EAAGC,EAAE,IAAKvC,GAAG,CAACgC,GAAG,CAAC,UAAUO,EAAE,EAAE,CAAC;EAExC;EACAC,YAAY,EAAEA,CAAA,KAAMxC,GAAG,CAACgC,GAAG,CAAC,uBAAuB;AACrD,CAAC;;AAED;AACA,OAAO,MAAMS,OAAO,GAAG;EACrB;EACAC,QAAQ,EAAGC,QAAQ,IAAK3C,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAEkB,QAAQ,CAAC;EAE5D;EACAC,KAAK,EAAGC,WAAW,IAAK7C,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAEoB,WAAW;AAC7D,CAAC;AAED,eAAe7C,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}