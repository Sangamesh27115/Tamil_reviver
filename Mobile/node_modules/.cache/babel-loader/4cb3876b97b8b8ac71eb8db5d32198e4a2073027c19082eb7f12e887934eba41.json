{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanga\\\\Desktop\\\\App\\\\Mobile\\\\src\\\\components\\\\games\\\\MatchGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatchContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n`;\n_c = MatchContainer;\nconst OptionsGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n`;\n_c2 = OptionsGrid;\nconst OptionCard = styled(motion.div)`\n  background: ${props => {\n  if (props.selected) return '#667eea';\n  if (props.matched) return '#4CAF50';\n  if (props.wrong) return '#f44336';\n  return '#f8f9fa';\n}};\n  color: ${props => {\n  if (props.selected || props.matched || props.wrong) return 'white';\n  return '#333';\n}};\n  padding: 1.5rem;\n  border-radius: 15px;\n  cursor: pointer;\n  text-align: center;\n  font-weight: bold;\n  font-size: 1.1rem;\n  border: 2px solid transparent;\n  transition: all 0.3s ease;\n  min-height: 80px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    border-color: #667eea;\n    transform: translateY(-2px);\n  }\n`;\n_c3 = OptionCard;\nconst SubmitButton = styled(motion.button)`\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  padding: 1rem 2rem;\n  border-radius: 25px;\n  font-weight: bold;\n  cursor: pointer;\n  font-size: 1.1rem;\n  margin-top: 1rem;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`;\n_c4 = SubmitButton;\nconst MatchGame = ({\n  question,\n  onSubmit\n}) => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n  const [wrongPairs, setWrongPairs] = useState([]);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  // Parse the question to extract Tamil and English options\n  const parseQuestion = () => {\n    const isTamilToEnglish = question.question.includes('Tamil word');\n    const correctAnswer = question.correctAnswer;\n\n    // For match games, we need to create pairs\n    // This is a simplified version - in a real app, you'd have more sophisticated parsing\n    const options = [];\n    if (isTamilToEnglish) {\n      var _question$question$ma;\n      // Tamil word to English meaning\n      options.push({\n        id: 'tamil',\n        text: ((_question$question$ma = question.question.match(/\"([^\"]+)\"/)) === null || _question$question$ma === void 0 ? void 0 : _question$question$ma[1]) || 'Tamil Word',\n        type: 'tamil'\n      });\n      options.push({\n        id: 'english',\n        text: correctAnswer,\n        type: 'english'\n      });\n    } else {\n      var _question$question$ma2;\n      // English meaning to Tamil word\n      options.push({\n        id: 'english',\n        text: ((_question$question$ma2 = question.question.match(/\"([^\"]+)\"/)) === null || _question$question$ma2 === void 0 ? void 0 : _question$question$ma2[1]) || 'English Meaning',\n        type: 'english'\n      });\n      options.push({\n        id: 'tamil',\n        text: correctAnswer,\n        type: 'tamil'\n      });\n    }\n    return options;\n  };\n  const options = parseQuestion();\n  const handleOptionClick = option => {\n    if (isSubmitted) return;\n    setSelectedOptions(prev => {\n      if (prev.includes(option.id)) {\n        return prev.filter(id => id !== option.id);\n      } else if (prev.length < 2) {\n        return [...prev, option.id];\n      } else {\n        // Replace the first selection\n        return [prev[1], option.id];\n      }\n    });\n  };\n  const handleSubmit = () => {\n    if (selectedOptions.length !== 2) return;\n    setIsSubmitted(true);\n\n    // Check if the selected pair is correct\n    const isCorrect = selectedOptions.includes('tamil') && selectedOptions.includes('english');\n    if (isCorrect) {\n      setMatchedPairs(selectedOptions);\n      setTimeout(() => {\n        onSubmit(correctAnswer);\n      }, 1000);\n    } else {\n      setWrongPairs(selectedOptions);\n      setTimeout(() => {\n        onSubmit('wrong');\n      }, 1000);\n    }\n  };\n  const getOptionState = option => {\n    if (matchedPairs.includes(option.id)) return 'matched';\n    if (wrongPairs.includes(option.id)) return 'wrong';\n    if (selectedOptions.includes(option.id)) return 'selected';\n    return 'default';\n  };\n  return /*#__PURE__*/_jsxDEV(MatchContainer, {\n    children: [/*#__PURE__*/_jsxDEV(OptionsGrid, {\n      children: options.map(option => /*#__PURE__*/_jsxDEV(OptionCard, {\n        selected: selectedOptions.includes(option.id),\n        matched: matchedPairs.includes(option.id),\n        wrong: wrongPairs.includes(option.id),\n        onClick: () => handleOptionClick(option),\n        whileHover: {\n          scale: 1.02\n        },\n        whileTap: {\n          scale: 0.98\n        },\n        children: option.text\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n      onClick: handleSubmit,\n      disabled: selectedOptions.length !== 2 || isSubmitted,\n      whileHover: {\n        scale: 1.05\n      },\n      whileTap: {\n        scale: 0.95\n      },\n      children: isSubmitted ? 'Checking...' : 'Submit Match'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(MatchGame, \"Auw11/lbY5OnshkDfdK8/VOQfbY=\");\n_c5 = MatchGame;\nexport default MatchGame;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MatchContainer\");\n$RefreshReg$(_c2, \"OptionsGrid\");\n$RefreshReg$(_c3, \"OptionCard\");\n$RefreshReg$(_c4, \"SubmitButton\");\n$RefreshReg$(_c5, \"MatchGame\");","map":{"version":3,"names":["React","useState","useEffect","motion","styled","jsxDEV","_jsxDEV","MatchContainer","div","_c","OptionsGrid","_c2","OptionCard","props","selected","matched","wrong","_c3","SubmitButton","button","_c4","MatchGame","question","onSubmit","_s","selectedOptions","setSelectedOptions","matchedPairs","setMatchedPairs","wrongPairs","setWrongPairs","isSubmitted","setIsSubmitted","parseQuestion","isTamilToEnglish","includes","correctAnswer","options","_question$question$ma","push","id","text","match","type","_question$question$ma2","handleOptionClick","option","prev","filter","length","handleSubmit","isCorrect","setTimeout","getOptionState","children","map","onClick","whileHover","scale","whileTap","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c5","$RefreshReg$"],"sources":["C:/Users/sanga/Desktop/App/Mobile/src/components/games/MatchGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\n\r\nconst MatchContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n`;\r\n\r\nconst OptionsGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst OptionCard = styled(motion.div)`\r\n  background: ${props => {\r\n    if (props.selected) return '#667eea';\r\n    if (props.matched) return '#4CAF50';\r\n    if (props.wrong) return '#f44336';\r\n    return '#f8f9fa';\r\n  }};\r\n  color: ${props => {\r\n    if (props.selected || props.matched || props.wrong) return 'white';\r\n    return '#333';\r\n  }};\r\n  padding: 1.5rem;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  font-size: 1.1rem;\r\n  border: 2px solid transparent;\r\n  transition: all 0.3s ease;\r\n  min-height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &:hover {\r\n    border-color: #667eea;\r\n    transform: translateY(-2px);\r\n  }\r\n`;\r\n\r\nconst SubmitButton = styled(motion.button)`\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border: none;\r\n  padding: 1rem 2rem;\r\n  border-radius: 25px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  font-size: 1.1rem;\r\n  margin-top: 1rem;\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst MatchGame = ({ question, onSubmit }) => {\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [matchedPairs, setMatchedPairs] = useState([]);\r\n  const [wrongPairs, setWrongPairs] = useState([]);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  // Parse the question to extract Tamil and English options\r\n  const parseQuestion = () => {\r\n    const isTamilToEnglish = question.question.includes('Tamil word');\r\n    const correctAnswer = question.correctAnswer;\r\n    \r\n    // For match games, we need to create pairs\r\n    // This is a simplified version - in a real app, you'd have more sophisticated parsing\r\n    const options = [];\r\n    \r\n    if (isTamilToEnglish) {\r\n      // Tamil word to English meaning\r\n      options.push({\r\n        id: 'tamil',\r\n        text: question.question.match(/\"([^\"]+)\"/)?.[1] || 'Tamil Word',\r\n        type: 'tamil'\r\n      });\r\n      options.push({\r\n        id: 'english',\r\n        text: correctAnswer,\r\n        type: 'english'\r\n      });\r\n    } else {\r\n      // English meaning to Tamil word\r\n      options.push({\r\n        id: 'english',\r\n        text: question.question.match(/\"([^\"]+)\"/)?.[1] || 'English Meaning',\r\n        type: 'english'\r\n      });\r\n      options.push({\r\n        id: 'tamil',\r\n        text: correctAnswer,\r\n        type: 'tamil'\r\n      });\r\n    }\r\n\r\n    return options;\r\n  };\r\n\r\n  const options = parseQuestion();\r\n\r\n  const handleOptionClick = (option) => {\r\n    if (isSubmitted) return;\r\n\r\n    setSelectedOptions(prev => {\r\n      if (prev.includes(option.id)) {\r\n        return prev.filter(id => id !== option.id);\r\n      } else if (prev.length < 2) {\r\n        return [...prev, option.id];\r\n      } else {\r\n        // Replace the first selection\r\n        return [prev[1], option.id];\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (selectedOptions.length !== 2) return;\r\n\r\n    setIsSubmitted(true);\r\n    \r\n    // Check if the selected pair is correct\r\n    const isCorrect = selectedOptions.includes('tamil') && selectedOptions.includes('english');\r\n    \r\n    if (isCorrect) {\r\n      setMatchedPairs(selectedOptions);\r\n      setTimeout(() => {\r\n        onSubmit(correctAnswer);\r\n      }, 1000);\r\n    } else {\r\n      setWrongPairs(selectedOptions);\r\n      setTimeout(() => {\r\n        onSubmit('wrong');\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const getOptionState = (option) => {\r\n    if (matchedPairs.includes(option.id)) return 'matched';\r\n    if (wrongPairs.includes(option.id)) return 'wrong';\r\n    if (selectedOptions.includes(option.id)) return 'selected';\r\n    return 'default';\r\n  };\r\n\r\n  return (\r\n    <MatchContainer>\r\n      <OptionsGrid>\r\n        {options.map((option) => (\r\n          <OptionCard\r\n            key={option.id}\r\n            selected={selectedOptions.includes(option.id)}\r\n            matched={matchedPairs.includes(option.id)}\r\n            wrong={wrongPairs.includes(option.id)}\r\n            onClick={() => handleOptionClick(option)}\r\n            whileHover={{ scale: 1.02 }}\r\n            whileTap={{ scale: 0.98 }}\r\n          >\r\n            {option.text}\r\n          </OptionCard>\r\n        ))}\r\n      </OptionsGrid>\r\n\r\n      <SubmitButton\r\n        onClick={handleSubmit}\r\n        disabled={selectedOptions.length !== 2 || isSubmitted}\r\n        whileHover={{ scale: 1.05 }}\r\n        whileTap={{ scale: 0.95 }}\r\n      >\r\n        {isSubmitted ? 'Checking...' : 'Submit Match'}\r\n      </SubmitButton>\r\n    </MatchContainer>\r\n  );\r\n};\r\n\r\nexport default MatchGame;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}