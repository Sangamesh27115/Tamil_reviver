{"ast":null,"code":"// Mobile/src/services/api.js\nimport axios from 'axios';\nimport * as SecureStore from 'expo-secure-store';\nconst api = axios.create({\n  baseURL: process.env.EXPO_PUBLIC_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(async config => {\n  const token = await SecureStore.getItemAsync('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor with proper error handling\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear invalid token\n    try {\n      await SecureStore.deleteItemAsync('token');\n    } catch (e) {\n      // ignore\n    }\n    // Optionally trigger app-wide logout flow here\n  }\n  return Promise.reject(error);\n});\n\n// Game API functions - match backend endpoints\nexport const gameAPI = {\n  startGame: gameData => api.post('/game/start', gameData),\n  submitAnswer: (sessionId, questionIndex, answer, timeSpent = 0) => api.post(`/game/${sessionId}/answer`, {\n    questionIndex,\n    answer,\n    timeSpent\n  }),\n  useHint: (sessionId, questionIndex) => api.post(`/game/${sessionId}/hint`, {\n    questionIndex\n  }),\n  completeGame: sessionId => api.post(`/game/${sessionId}/complete`),\n  abandonGame: sessionId => api.post(`/game/${sessionId}/abandon`),\n  getGameHistory: (params = {}) => api.get('/game/history', {\n    params\n  }),\n  getLeaderboard: (params = {}) => api.get('/game/leaderboard', {\n    params\n  }),\n  getUserStats: () => api.get('/game/stats'),\n  getActiveGame: () => api.get('/game/active')\n};\n\n// Word API functions\nexport const wordAPI = {\n  getWords: (params = {}) => api.get('/words', {\n    params\n  }),\n  getRandomWords: (params = {}) => api.get('/words/random', {\n    params\n  }),\n  searchWords: (params = {}) => api.get('/words/search', {\n    params\n  }),\n  getWord: id => api.get(`/words/${id}`),\n  getWordStats: () => api.get('/words/stats/overview')\n};\n\n// Auth API functions\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: profileData => api.put('/auth/profile', profileData),\n  changePassword: (currentPassword, newPassword) => api.put('/auth/change-password', {\n    currentPassword,\n    newPassword\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","SecureStore","api","create","baseURL","process","env","EXPO_PUBLIC_API_URL","headers","interceptors","request","use","config","token","getItemAsync","Authorization","error","Promise","reject","response","_error$response","status","deleteItemAsync","e","gameAPI","startGame","gameData","post","submitAnswer","sessionId","questionIndex","answer","timeSpent","useHint","completeGame","abandonGame","getGameHistory","params","get","getLeaderboard","getUserStats","getActiveGame","wordAPI","getWords","getRandomWords","searchWords","getWord","id","getWordStats","authAPI","register","userData","login","credentials","getProfile","updateProfile","profileData","put","changePassword","currentPassword","newPassword"],"sources":["C:/Users/sanga/Desktop/App/Mobile/src/services/api.js"],"sourcesContent":["// Mobile/src/services/api.js\nimport axios from 'axios';\nimport * as SecureStore from 'expo-secure-store';\n\nconst api = axios.create({\n  baseURL: process.env.EXPO_PUBLIC_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  async (config) => {\n    const token = await SecureStore.getItemAsync('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response interceptor with proper error handling\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    if (error.response?.status === 401) {\n      // Clear invalid token\n      try {\n        await SecureStore.deleteItemAsync('token');\n      } catch (e) {\n        // ignore\n      }\n      // Optionally trigger app-wide logout flow here\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Game API functions - match backend endpoints\nexport const gameAPI = {\n  startGame: (gameData) => api.post('/game/start', gameData),\n  submitAnswer: (sessionId, questionIndex, answer, timeSpent = 0) =>\n    api.post(`/game/${sessionId}/answer`, { questionIndex, answer, timeSpent }),\n  useHint: (sessionId, questionIndex) => api.post(`/game/${sessionId}/hint`, { questionIndex }),\n  completeGame: (sessionId) => api.post(`/game/${sessionId}/complete`),\n  abandonGame: (sessionId) => api.post(`/game/${sessionId}/abandon`),\n  getGameHistory: (params = {}) => api.get('/game/history', { params }),\n  getLeaderboard: (params = {}) => api.get('/game/leaderboard', { params }),\n  getUserStats: () => api.get('/game/stats'),\n  getActiveGame: () => api.get('/game/active')\n};\n\n// Word API functions\nexport const wordAPI = {\n  getWords: (params = {}) => api.get('/words', { params }),\n  getRandomWords: (params = {}) => api.get('/words/random', { params }),\n  searchWords: (params = {}) => api.get('/words/search', { params }),\n  getWord: (id) => api.get(`/words/${id}`),\n  getWordStats: () => api.get('/words/stats/overview')\n};\n\n// Auth API functions\nexport const authAPI = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: (profileData) => api.put('/auth/profile', profileData),\n  changePassword: (currentPassword, newPassword) => api.put('/auth/change-password', { currentPassword, newPassword })\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}