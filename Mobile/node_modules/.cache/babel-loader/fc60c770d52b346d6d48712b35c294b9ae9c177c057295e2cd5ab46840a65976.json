{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanga\\\\Desktop\\\\App\\\\Mobile\\\\src\\\\pages\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../contexts/GameContext';\nimport { ArrowLeft, Clock, Target, CheckCircle, XCircle } from 'lucide-react';\nimport styled from 'styled-components';\nimport MatchGame from '../components/games/MatchGame';\nimport FillBlanksGame from '../components/games/FillBlanksGame';\nimport MCQGame from '../components/games/MCQGame';\nimport GameResult from '../components/games/GameResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n`;\n_c = GameContainer;\nconst GameHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n  color: white;\n`;\n_c2 = GameHeader;\nconst BackButton = styled(motion.button)`\n  background: rgba(255,255,255,0.2);\n  border: none;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  cursor: pointer;\n  backdrop-filter: blur(10px);\n`;\n_c3 = BackButton;\nconst GameInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n`;\n_c4 = GameInfo;\nconst InfoItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(255,255,255,0.2);\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  backdrop-filter: blur(10px);\n`;\n_c5 = InfoItem;\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 8px;\n  background: rgba(255,255,255,0.2);\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 2rem;\n`;\n_c6 = ProgressBar;\nconst ProgressFill = styled(motion.div)`\n  height: 100%;\n  background: linear-gradient(90deg, #4CAF50, #8BC34A);\n  border-radius: 4px;\n`;\n_c7 = ProgressFill;\nconst GameContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n_c8 = GameContent;\nconst QuestionCard = styled(motion.div)`\n  background: white;\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n  width: 100%;\n  max-width: 600px;\n  margin-bottom: 2rem;\n`;\n_c9 = QuestionCard;\nconst QuestionNumber = styled.div`\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  display: inline-block;\n`;\n_c0 = QuestionNumber;\nconst QuestionText = styled.h2`\n  font-size: 1.5rem;\n  color: #333;\n  margin-bottom: 1.5rem;\n  line-height: 1.4;\n  text-align: center;\n`;\n_c1 = QuestionText;\nconst GameTypeIndicator = styled.div`\n  background: ${props => {\n  switch (props.gameType) {\n    case 'match':\n      return '#4CAF50';\n    case 'fill_blanks':\n      return '#FF9800';\n    case 'mcq':\n      return '#2196F3';\n    default:\n      return '#666';\n  }\n}};\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 15px;\n  font-size: 0.8rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  display: inline-block;\n`;\n_c10 = GameTypeIndicator;\nconst LoadingContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 50vh;\n  color: white;\n`;\n_c11 = LoadingContainer;\nconst LoadingSpinner = styled(motion.div)`\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(255,255,255,0.3);\n  border-top: 3px solid white;\n  border-radius: 50%;\n  margin-bottom: 1rem;\n`;\n_c12 = LoadingSpinner;\nconst Game = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    currentGame,\n    gameResult,\n    loading,\n    getCurrentQuestion,\n    isGameCompleted,\n    getGameProgress,\n    getCurrentScore,\n    getCorrectAnswersCount,\n    submitAnswer,\n    completeGame,\n    resetGame\n  } = useGame();\n  const [questionStartTime, setQuestionStartTime] = useState(Date.now());\n  useEffect(() => {\n    if (!currentGame && !gameResult) {\n      navigate('/game-selection');\n    }\n  }, [currentGame, gameResult, navigate]);\n  useEffect(() => {\n    if (currentGame) {\n      setQuestionStartTime(Date.now());\n    }\n  }, [currentGame === null || currentGame === void 0 ? void 0 : currentGame.currentQuestionIndex]);\n  const handleAnswerSubmit = async answer => {\n    const currentQuestion = getCurrentQuestion();\n    if (!currentQuestion) return;\n    const timeSpent = Math.floor((Date.now() - questionStartTime) / 1000);\n    try {\n      await submitAnswer(currentQuestion.questionId, answer, timeSpent);\n    } catch (error) {\n      console.error('Failed to submit answer:', error);\n    }\n  };\n  const handleGameComplete = async () => {\n    try {\n      await completeGame();\n    } catch (error) {\n      console.error('Failed to complete game:', error);\n    }\n  };\n  const handleBackToSelection = () => {\n    resetGame();\n    navigate('/game-selection');\n  };\n  const handlePlayAgain = () => {\n    resetGame();\n    navigate('/game-selection');\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(GameContainer, {\n      children: /*#__PURE__*/_jsxDEV(LoadingContainer, {\n        children: [/*#__PURE__*/_jsxDEV(LoadingSpinner, {\n          animate: {\n            rotate: 360\n          },\n          transition: {\n            duration: 1,\n            repeat: Infinity,\n            ease: \"linear\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading game...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this);\n  }\n  if (gameResult) {\n    return /*#__PURE__*/_jsxDEV(GameResult, {\n      result: gameResult,\n      onPlayAgain: handlePlayAgain,\n      onBackToDashboard: () => navigate('/dashboard')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this);\n  }\n  if (!currentGame) {\n    return /*#__PURE__*/_jsxDEV(GameContainer, {\n      children: /*#__PURE__*/_jsxDEV(LoadingContainer, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No active game found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToSelection,\n          children: \"Back to Game Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = getCurrentQuestion();\n  const progress = getGameProgress();\n  const currentScore = getCurrentScore();\n  const correctCount = getCorrectAnswersCount();\n  const getGameTypeLabel = type => {\n    switch (type) {\n      case 'match':\n        return 'Match the Following';\n      case 'fill_blanks':\n        return 'Fill in the Blanks';\n      case 'mcq':\n        return 'Multiple Choice';\n      default:\n        return 'Game';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      children: [/*#__PURE__*/_jsxDEV(BackButton, {\n        whileHover: {\n          scale: 1.1\n        },\n        whileTap: {\n          scale: 0.9\n        },\n        onClick: handleBackToSelection,\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameInfo, {\n        children: [/*#__PURE__*/_jsxDEV(InfoItem, {\n          children: [/*#__PURE__*/_jsxDEV(Target, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [currentScore, \" pts\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n          children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [correctCount, \"/\", currentGame.totalQuestions]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      children: /*#__PURE__*/_jsxDEV(ProgressFill, {\n        initial: {\n          width: 0\n        },\n        animate: {\n          width: `${progress}%`\n        },\n        transition: {\n          duration: 0.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameContent, {\n      children: [/*#__PURE__*/_jsxDEV(AnimatePresence, {\n        mode: \"wait\",\n        children: currentQuestion && /*#__PURE__*/_jsxDEV(QuestionCard, {\n          initial: {\n            opacity: 0,\n            x: 50\n          },\n          animate: {\n            opacity: 1,\n            x: 0\n          },\n          exit: {\n            opacity: 0,\n            x: -50\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: [/*#__PURE__*/_jsxDEV(GameTypeIndicator, {\n            gameType: currentGame.gameType,\n            children: getGameTypeLabel(currentGame.gameType)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(QuestionNumber, {\n            children: [\"Question \", currentGame.currentQuestionIndex + 1, \" of \", currentGame.totalQuestions]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(QuestionText, {\n            children: currentQuestion.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this), currentGame.gameType === 'match' && /*#__PURE__*/_jsxDEV(MatchGame, {\n            question: currentQuestion,\n            onSubmit: handleAnswerSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }, this), currentGame.gameType === 'fill_blanks' && /*#__PURE__*/_jsxDEV(FillBlanksGame, {\n            question: currentQuestion,\n            onSubmit: handleAnswerSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this), currentGame.gameType === 'mcq' && /*#__PURE__*/_jsxDEV(MCQGame, {\n            question: currentQuestion,\n            onSubmit: handleAnswerSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 17\n          }, this)]\n        }, currentGame.currentQuestionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), isGameCompleted() && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0,\n          y: 20\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        style: {\n          textAlign: 'center',\n          color: 'white'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"All questions completed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Final Score: \", currentScore, \" points\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGameComplete,\n          style: {\n            background: 'white',\n            color: '#667eea',\n            border: 'none',\n            padding: '1rem 2rem',\n            borderRadius: '25px',\n            fontWeight: 'bold',\n            cursor: 'pointer',\n            marginTop: '1rem'\n          },\n          children: \"Complete Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"reG5dD+ClZ+wFERigkjsKX4Vmz0=\", false, function () {\n  return [useNavigate, useGame];\n});\n_c13 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"GameContainer\");\n$RefreshReg$(_c2, \"GameHeader\");\n$RefreshReg$(_c3, \"BackButton\");\n$RefreshReg$(_c4, \"GameInfo\");\n$RefreshReg$(_c5, \"InfoItem\");\n$RefreshReg$(_c6, \"ProgressBar\");\n$RefreshReg$(_c7, \"ProgressFill\");\n$RefreshReg$(_c8, \"GameContent\");\n$RefreshReg$(_c9, \"QuestionCard\");\n$RefreshReg$(_c0, \"QuestionNumber\");\n$RefreshReg$(_c1, \"QuestionText\");\n$RefreshReg$(_c10, \"GameTypeIndicator\");\n$RefreshReg$(_c11, \"LoadingContainer\");\n$RefreshReg$(_c12, \"LoadingSpinner\");\n$RefreshReg$(_c13, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","motion","AnimatePresence","useNavigate","useGame","ArrowLeft","Clock","Target","CheckCircle","XCircle","styled","MatchGame","FillBlanksGame","MCQGame","GameResult","jsxDEV","_jsxDEV","GameContainer","div","_c","GameHeader","_c2","BackButton","button","_c3","GameInfo","_c4","InfoItem","_c5","ProgressBar","_c6","ProgressFill","_c7","GameContent","_c8","QuestionCard","_c9","QuestionNumber","_c0","QuestionText","h2","_c1","GameTypeIndicator","props","gameType","_c10","LoadingContainer","_c11","LoadingSpinner","_c12","Game","_s","navigate","currentGame","gameResult","loading","getCurrentQuestion","isGameCompleted","getGameProgress","getCurrentScore","getCorrectAnswersCount","submitAnswer","completeGame","resetGame","questionStartTime","setQuestionStartTime","Date","now","currentQuestionIndex","handleAnswerSubmit","answer","currentQuestion","timeSpent","Math","floor","questionId","error","console","handleGameComplete","handleBackToSelection","handlePlayAgain","children","animate","rotate","transition","duration","repeat","Infinity","ease","fileName","_jsxFileName","lineNumber","columnNumber","result","onPlayAgain","onBackToDashboard","onClick","progress","currentScore","correctCount","getGameTypeLabel","type","whileHover","scale","whileTap","size","totalQuestions","initial","width","mode","opacity","x","exit","question","onSubmit","y","style","textAlign","color","background","border","padding","borderRadius","fontWeight","cursor","marginTop","_c13","$RefreshReg$"],"sources":["C:/Users/sanga/Desktop/App/Mobile/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../contexts/GameContext';\nimport { ArrowLeft, Clock, Target, CheckCircle, XCircle } from 'lucide-react';\nimport styled from 'styled-components';\nimport MatchGame from '../components/games/MatchGame';\nimport FillBlanksGame from '../components/games/FillBlanksGame';\nimport MCQGame from '../components/games/MCQGame';\nimport GameResult from '../components/games/GameResult';\n\nconst GameContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst GameHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n  color: white;\n`;\n\nconst BackButton = styled(motion.button)`\n  background: rgba(255,255,255,0.2);\n  border: none;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  cursor: pointer;\n  backdrop-filter: blur(10px);\n`;\n\nconst GameInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n`;\n\nconst InfoItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(255,255,255,0.2);\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  backdrop-filter: blur(10px);\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 8px;\n  background: rgba(255,255,255,0.2);\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 2rem;\n`;\n\nconst ProgressFill = styled(motion.div)`\n  height: 100%;\n  background: linear-gradient(90deg, #4CAF50, #8BC34A);\n  border-radius: 4px;\n`;\n\nconst GameContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst QuestionCard = styled(motion.div)`\n  background: white;\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n  width: 100%;\n  max-width: 600px;\n  margin-bottom: 2rem;\n`;\n\nconst QuestionNumber = styled.div`\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  display: inline-block;\n`;\n\nconst QuestionText = styled.h2`\n  font-size: 1.5rem;\n  color: #333;\n  margin-bottom: 1.5rem;\n  line-height: 1.4;\n  text-align: center;\n`;\n\nconst GameTypeIndicator = styled.div`\n  background: ${props => {\n    switch(props.gameType) {\n      case 'match': return '#4CAF50';\n      case 'fill_blanks': return '#FF9800';\n      case 'mcq': return '#2196F3';\n      default: return '#666';\n    }\n  }};\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 15px;\n  font-size: 0.8rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  display: inline-block;\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 50vh;\n  color: white;\n`;\n\nconst LoadingSpinner = styled(motion.div)`\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(255,255,255,0.3);\n  border-top: 3px solid white;\n  border-radius: 50%;\n  margin-bottom: 1rem;\n`;\n\nconst Game = () => {\n  const navigate = useNavigate();\n  const {\n    currentGame,\n    gameResult,\n    loading,\n    getCurrentQuestion,\n    isGameCompleted,\n    getGameProgress,\n    getCurrentScore,\n    getCorrectAnswersCount,\n    submitAnswer,\n    completeGame,\n    resetGame,\n  } = useGame();\n\n  const [questionStartTime, setQuestionStartTime] = useState(Date.now());\n\n  useEffect(() => {\n    if (!currentGame && !gameResult) {\n      navigate('/game-selection');\n    }\n  }, [currentGame, gameResult, navigate]);\n\n  useEffect(() => {\n    if (currentGame) {\n      setQuestionStartTime(Date.now());\n    }\n  }, [currentGame?.currentQuestionIndex]);\n\n  const handleAnswerSubmit = async (answer) => {\n    const currentQuestion = getCurrentQuestion();\n    if (!currentQuestion) return;\n\n    const timeSpent = Math.floor((Date.now() - questionStartTime) / 1000);\n    \n    try {\n      await submitAnswer(currentQuestion.questionId, answer, timeSpent);\n    } catch (error) {\n      console.error('Failed to submit answer:', error);\n    }\n  };\n\n  const handleGameComplete = async () => {\n    try {\n      await completeGame();\n    } catch (error) {\n      console.error('Failed to complete game:', error);\n    }\n  };\n\n  const handleBackToSelection = () => {\n    resetGame();\n    navigate('/game-selection');\n  };\n\n  const handlePlayAgain = () => {\n    resetGame();\n    navigate('/game-selection');\n  };\n\n  if (loading) {\n    return (\n      <GameContainer>\n        <LoadingContainer>\n          <LoadingSpinner\n            animate={{ rotate: 360 }}\n            transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n          />\n          <p>Loading game...</p>\n        </LoadingContainer>\n      </GameContainer>\n    );\n  }\n\n  if (gameResult) {\n    return (\n      <GameResult\n        result={gameResult}\n        onPlayAgain={handlePlayAgain}\n        onBackToDashboard={() => navigate('/dashboard')}\n      />\n    );\n  }\n\n  if (!currentGame) {\n    return (\n      <GameContainer>\n        <LoadingContainer>\n          <p>No active game found</p>\n          <button onClick={handleBackToSelection}>Back to Game Selection</button>\n        </LoadingContainer>\n      </GameContainer>\n    );\n  }\n\n  const currentQuestion = getCurrentQuestion();\n  const progress = getGameProgress();\n  const currentScore = getCurrentScore();\n  const correctCount = getCorrectAnswersCount();\n\n  const getGameTypeLabel = (type) => {\n    switch(type) {\n      case 'match': return 'Match the Following';\n      case 'fill_blanks': return 'Fill in the Blanks';\n      case 'mcq': return 'Multiple Choice';\n      default: return 'Game';\n    }\n  };\n\n  return (\n    <GameContainer>\n      <GameHeader>\n        <BackButton\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={handleBackToSelection}\n        >\n          <ArrowLeft size={24} />\n        </BackButton>\n\n        <GameInfo>\n          <InfoItem>\n            <Target size={16} />\n            <span>{currentScore} pts</span>\n          </InfoItem>\n          <InfoItem>\n            <CheckCircle size={16} />\n            <span>{correctCount}/{currentGame.totalQuestions}</span>\n          </InfoItem>\n        </GameInfo>\n      </GameHeader>\n\n      <ProgressBar>\n        <ProgressFill\n          initial={{ width: 0 }}\n          animate={{ width: `${progress}%` }}\n          transition={{ duration: 0.5 }}\n        />\n      </ProgressBar>\n\n      <GameContent>\n        <AnimatePresence mode=\"wait\">\n          {currentQuestion && (\n            <QuestionCard\n              key={currentGame.currentQuestionIndex}\n              initial={{ opacity: 0, x: 50 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -50 }}\n              transition={{ duration: 0.3 }}\n            >\n              <GameTypeIndicator gameType={currentGame.gameType}>\n                {getGameTypeLabel(currentGame.gameType)}\n              </GameTypeIndicator>\n              \n              <QuestionNumber>\n                Question {currentGame.currentQuestionIndex + 1} of {currentGame.totalQuestions}\n              </QuestionNumber>\n\n              <QuestionText>{currentQuestion.question}</QuestionText>\n\n              {currentGame.gameType === 'match' && (\n                <MatchGame\n                  question={currentQuestion}\n                  onSubmit={handleAnswerSubmit}\n                />\n              )}\n\n              {currentGame.gameType === 'fill_blanks' && (\n                <FillBlanksGame\n                  question={currentQuestion}\n                  onSubmit={handleAnswerSubmit}\n                />\n              )}\n\n              {currentGame.gameType === 'mcq' && (\n                <MCQGame\n                  question={currentQuestion}\n                  onSubmit={handleAnswerSubmit}\n                />\n              )}\n            </QuestionCard>\n          )}\n        </AnimatePresence>\n\n        {isGameCompleted() && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            style={{ textAlign: 'center', color: 'white' }}\n          >\n            <h3>All questions completed!</h3>\n            <p>Final Score: {currentScore} points</p>\n            <button\n              onClick={handleGameComplete}\n              style={{\n                background: 'white',\n                color: '#667eea',\n                border: 'none',\n                padding: '1rem 2rem',\n                borderRadius: '25px',\n                fontWeight: 'bold',\n                cursor: 'pointer',\n                marginTop: '1rem',\n              }}\n            >\n              Complete Game\n            </button>\n          </motion.div>\n        )}\n      </GameContent>\n    </GameContainer>\n  );\n};\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}