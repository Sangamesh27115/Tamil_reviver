{"ast":null,"code":"import _objectSpread from\"C:/Users/sanga/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import{gameAPI}from'../services/api';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const GameContext=/*#__PURE__*/createContext();// Game state reducer\nconst gameReducer=(state,action)=>{switch(action.type){case'SET_LOADING':return _objectSpread(_objectSpread({},state),{},{loading:action.payload});case'START_GAME':return _objectSpread(_objectSpread({},state),{},{currentGame:{sessionId:action.payload.sessionId,gameType:action.payload.gameType,totalQuestions:action.payload.totalQuestions,questions:action.payload.questions,currentQuestionIndex:0,answers:[],startTime:Date.now()},loading:false});case'SUBMIT_ANSWER':const newAnswers=[...state.currentGame.answers];newAnswers[action.payload.questionIndex]={questionId:action.payload.questionId,answer:action.payload.answer,timeSpent:action.payload.timeSpent,isCorrect:action.payload.isCorrect,points:action.payload.points,correctAnswer:action.payload.correctAnswer};return _objectSpread(_objectSpread({},state),{},{currentGame:_objectSpread(_objectSpread({},state.currentGame),{},{answers:newAnswers,currentQuestionIndex:state.currentGame.currentQuestionIndex+1})});case'COMPLETE_GAME':return _objectSpread(_objectSpread({},state),{},{currentGame:null,gameResult:action.payload,loading:false});case'RESET_GAME':return _objectSpread(_objectSpread({},state),{},{currentGame:null,gameResult:null,loading:false});case'SET_USER_STATS':return _objectSpread(_objectSpread({},state),{},{userStats:action.payload});case'SET_LEADERBOARD':return _objectSpread(_objectSpread({},state),{},{leaderboard:action.payload});case'SET_GAME_HISTORY':return _objectSpread(_objectSpread({},state),{},{gameHistory:action.payload});default:return state;}};const initialState={loading:false,currentGame:null,gameResult:null,userStats:null,leaderboard:[],gameHistory:[]};export const GameProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(gameReducer,initialState);// Start a new game\nconst startGame=async gameConfig=>{try{dispatch({type:'SET_LOADING',payload:true});const response=await gameAPI.startGame(gameConfig);dispatch({type:'START_GAME',payload:response.data});toast.success('Game started! Good luck!');}catch(error){var _error$response,_error$response$data;dispatch({type:'SET_LOADING',payload:false});toast.error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to start game');throw error;}};// Submit an answer\nconst submitAnswer=async(questionId,answer,timeSpent)=>{try{const response=await gameAPI.submitAnswer({sessionId:state.currentGame.sessionId,questionId,answer,timeSpent});dispatch({type:'SUBMIT_ANSWER',payload:_objectSpread({questionIndex:state.currentGame.currentQuestionIndex,questionId,answer,timeSpent},response.data)});if(response.data.isCorrect){toast.success(\"Correct! +\".concat(response.data.points,\" points\"));}else{toast.error(\"Wrong! The correct answer is: \".concat(response.data.correctAnswer));}return response.data;}catch(error){var _error$response2,_error$response2$data;toast.error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to submit answer');throw error;}};// Complete the game\nconst completeGame=async()=>{try{dispatch({type:'SET_LOADING',payload:true});const response=await gameAPI.completeGame(state.currentGame.sessionId);dispatch({type:'COMPLETE_GAME',payload:response.data});// Refresh user stats\nawait fetchUserStats();toast.success(\"Game completed! Score: \".concat(response.data.totalScore));}catch(error){var _error$response3,_error$response3$data;dispatch({type:'SET_LOADING',payload:false});toast.error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to complete game');throw error;}};// Fetch user statistics\nconst fetchUserStats=async()=>{try{const response=await gameAPI.getUserStats();dispatch({type:'SET_USER_STATS',payload:response.data});}catch(error){console.error('Failed to fetch user stats:',error);}};// Fetch leaderboard\nconst fetchLeaderboard=async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;try{const response=await gameAPI.getLeaderboard(limit);dispatch({type:'SET_LEADERBOARD',payload:response.data});}catch(error){console.error('Failed to fetch leaderboard:',error);}};// Fetch game history\nconst fetchGameHistory=async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await gameAPI.getGameHistory(params);dispatch({type:'SET_GAME_HISTORY',payload:response.data});}catch(error){console.error('Failed to fetch game history:',error);}};// Reset current game\nconst resetGame=()=>{dispatch({type:'RESET_GAME'});};// Get current question\nconst getCurrentQuestion=()=>{if(!state.currentGame||state.currentGame.currentQuestionIndex>=state.currentGame.questions.length){return null;}return state.currentGame.questions[state.currentGame.currentQuestionIndex];};// Check if game is completed\nconst isGameCompleted=()=>{return state.currentGame&&state.currentGame.currentQuestionIndex>=state.currentGame.questions.length;};// Get game progress\nconst getGameProgress=()=>{if(!state.currentGame)return 0;return state.currentGame.currentQuestionIndex/state.currentGame.totalQuestions*100;};// Get current score\nconst getCurrentScore=()=>{if(!state.currentGame)return 0;return state.currentGame.answers.reduce((total,answer)=>total+((answer===null||answer===void 0?void 0:answer.points)||0),0);};// Get correct answers count\nconst getCorrectAnswersCount=()=>{if(!state.currentGame)return 0;return state.currentGame.answers.filter(answer=>answer===null||answer===void 0?void 0:answer.isCorrect).length;};const value=_objectSpread(_objectSpread({},state),{},{startGame,submitAnswer,completeGame,fetchUserStats,fetchLeaderboard,fetchGameHistory,resetGame,getCurrentQuestion,isGameCompleted,getGameProgress,getCurrentScore,getCorrectAnswersCount});return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});};export const useGame=()=>{const context=useContext(GameContext);if(!context){throw new Error('useGame must be used within a GameProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","gameAPI","toast","jsx","_jsx","GameContext","gameReducer","state","action","type","_objectSpread","loading","payload","currentGame","sessionId","gameType","totalQuestions","questions","currentQuestionIndex","answers","startTime","Date","now","newAnswers","questionIndex","questionId","answer","timeSpent","isCorrect","points","correctAnswer","gameResult","userStats","leaderboard","gameHistory","initialState","GameProvider","_ref","children","dispatch","startGame","gameConfig","response","data","success","error","_error$response","_error$response$data","message","submitAnswer","concat","_error$response2","_error$response2$data","completeGame","fetchUserStats","totalScore","_error$response3","_error$response3$data","getUserStats","console","fetchLeaderboard","limit","arguments","length","undefined","getLeaderboard","fetchGameHistory","params","getGameHistory","resetGame","getCurrentQuestion","isGameCompleted","getGameProgress","getCurrentScore","reduce","total","getCorrectAnswersCount","filter","value","Provider","useGame","context","Error"],"sources":["C:/Users/sanga/Desktop/App/Mobile/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { gameAPI } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst GameContext = createContext();\r\n\r\n// Game state reducer\r\nconst gameReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    \r\n    case 'START_GAME':\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          sessionId: action.payload.sessionId,\r\n          gameType: action.payload.gameType,\r\n          totalQuestions: action.payload.totalQuestions,\r\n          questions: action.payload.questions,\r\n          currentQuestionIndex: 0,\r\n          answers: [],\r\n          startTime: Date.now(),\r\n        },\r\n        loading: false,\r\n      };\r\n    \r\n    case 'SUBMIT_ANSWER':\r\n      const newAnswers = [...state.currentGame.answers];\r\n      newAnswers[action.payload.questionIndex] = {\r\n        questionId: action.payload.questionId,\r\n        answer: action.payload.answer,\r\n        timeSpent: action.payload.timeSpent,\r\n        isCorrect: action.payload.isCorrect,\r\n        points: action.payload.points,\r\n        correctAnswer: action.payload.correctAnswer,\r\n      };\r\n      \r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          answers: newAnswers,\r\n          currentQuestionIndex: state.currentGame.currentQuestionIndex + 1,\r\n        },\r\n      };\r\n    \r\n    case 'COMPLETE_GAME':\r\n      return {\r\n        ...state,\r\n        currentGame: null,\r\n        gameResult: action.payload,\r\n        loading: false,\r\n      };\r\n    \r\n    case 'RESET_GAME':\r\n      return {\r\n        ...state,\r\n        currentGame: null,\r\n        gameResult: null,\r\n        loading: false,\r\n      };\r\n    \r\n    case 'SET_USER_STATS':\r\n      return {\r\n        ...state,\r\n        userStats: action.payload,\r\n      };\r\n    \r\n    case 'SET_LEADERBOARD':\r\n      return {\r\n        ...state,\r\n        leaderboard: action.payload,\r\n      };\r\n    \r\n    case 'SET_GAME_HISTORY':\r\n      return {\r\n        ...state,\r\n        gameHistory: action.payload,\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  currentGame: null,\r\n  gameResult: null,\r\n  userStats: null,\r\n  leaderboard: [],\r\n  gameHistory: [],\r\n};\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  // Start a new game\r\n  const startGame = async (gameConfig) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await gameAPI.startGame(gameConfig);\r\n      \r\n      dispatch({\r\n        type: 'START_GAME',\r\n        payload: response.data,\r\n      });\r\n      \r\n      toast.success('Game started! Good luck!');\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      toast.error(error.response?.data?.message || 'Failed to start game');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Submit an answer\r\n  const submitAnswer = async (questionId, answer, timeSpent) => {\r\n    try {\r\n      const response = await gameAPI.submitAnswer({\r\n        sessionId: state.currentGame.sessionId,\r\n        questionId,\r\n        answer,\r\n        timeSpent,\r\n      });\r\n\r\n      dispatch({\r\n        type: 'SUBMIT_ANSWER',\r\n        payload: {\r\n          questionIndex: state.currentGame.currentQuestionIndex,\r\n          questionId,\r\n          answer,\r\n          timeSpent,\r\n          ...response.data,\r\n        },\r\n      });\r\n\r\n      if (response.data.isCorrect) {\r\n        toast.success(`Correct! +${response.data.points} points`);\r\n      } else {\r\n        toast.error(`Wrong! The correct answer is: ${response.data.correctAnswer}`);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || 'Failed to submit answer');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Complete the game\r\n  const completeGame = async () => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await gameAPI.completeGame(state.currentGame.sessionId);\r\n      \r\n      dispatch({\r\n        type: 'COMPLETE_GAME',\r\n        payload: response.data,\r\n      });\r\n\r\n      // Refresh user stats\r\n      await fetchUserStats();\r\n      \r\n      toast.success(`Game completed! Score: ${response.data.totalScore}`);\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      toast.error(error.response?.data?.message || 'Failed to complete game');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Fetch user statistics\r\n  const fetchUserStats = async () => {\r\n    try {\r\n      const response = await gameAPI.getUserStats();\r\n      dispatch({ type: 'SET_USER_STATS', payload: response.data });\r\n    } catch (error) {\r\n      console.error('Failed to fetch user stats:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch leaderboard\r\n  const fetchLeaderboard = async (limit = 10) => {\r\n    try {\r\n      const response = await gameAPI.getLeaderboard(limit);\r\n      dispatch({ type: 'SET_LEADERBOARD', payload: response.data });\r\n    } catch (error) {\r\n      console.error('Failed to fetch leaderboard:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch game history\r\n  const fetchGameHistory = async (params = {}) => {\r\n    try {\r\n      const response = await gameAPI.getGameHistory(params);\r\n      dispatch({ type: 'SET_GAME_HISTORY', payload: response.data });\r\n    } catch (error) {\r\n      console.error('Failed to fetch game history:', error);\r\n    }\r\n  };\r\n\r\n  // Reset current game\r\n  const resetGame = () => {\r\n    dispatch({ type: 'RESET_GAME' });\r\n  };\r\n\r\n  // Get current question\r\n  const getCurrentQuestion = () => {\r\n    if (!state.currentGame || state.currentGame.currentQuestionIndex >= state.currentGame.questions.length) {\r\n      return null;\r\n    }\r\n    return state.currentGame.questions[state.currentGame.currentQuestionIndex];\r\n  };\r\n\r\n  // Check if game is completed\r\n  const isGameCompleted = () => {\r\n    return state.currentGame && \r\n           state.currentGame.currentQuestionIndex >= state.currentGame.questions.length;\r\n  };\r\n\r\n  // Get game progress\r\n  const getGameProgress = () => {\r\n    if (!state.currentGame) return 0;\r\n    return (state.currentGame.currentQuestionIndex / state.currentGame.totalQuestions) * 100;\r\n  };\r\n\r\n  // Get current score\r\n  const getCurrentScore = () => {\r\n    if (!state.currentGame) return 0;\r\n    return state.currentGame.answers.reduce((total, answer) => total + (answer?.points || 0), 0);\r\n  };\r\n\r\n  // Get correct answers count\r\n  const getCorrectAnswersCount = () => {\r\n    if (!state.currentGame) return 0;\r\n    return state.currentGame.answers.filter(answer => answer?.isCorrect).length;\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    startGame,\r\n    submitAnswer,\r\n    completeGame,\r\n    fetchUserStats,\r\n    fetchLeaderboard,\r\n    fetchGameHistory,\r\n    resetGame,\r\n    getCurrentQuestion,\r\n    isGameCompleted,\r\n    getGameProgress,\r\n    getCurrentScore,\r\n    getCorrectAnswersCount,\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={value}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGame = () => {\r\n  const context = useContext(GameContext);\r\n  if (!context) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}