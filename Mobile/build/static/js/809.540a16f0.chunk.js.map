{"version":3,"file":"static/js/809.540a16f0.chunk.js","mappings":"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","sources":["components/games/MatchGame.js","components/games/FillBlanksGame.js","components/games/MCQGame.js","components/games/GameResult.js","pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\n\r\nconst MatchContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n`;\r\n\r\nconst OptionsGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst OptionCard = styled(motion.div)`\r\n  background: ${props => {\r\n    if (props.selected) return '#667eea';\r\n    if (props.matched) return '#4CAF50';\r\n    if (props.wrong) return '#f44336';\r\n    return '#f8f9fa';\r\n  }};\r\n  color: ${props => {\r\n    if (props.selected || props.matched || props.wrong) return 'white';\r\n    return '#333';\r\n  }};\r\n  padding: 1.5rem;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  font-size: 1.1rem;\r\n  border: 2px solid transparent;\r\n  transition: all 0.3s ease;\r\n  min-height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &:hover {\r\n    border-color: #667eea;\r\n    transform: translateY(-2px);\r\n  }\r\n`;\r\n\r\nconst SubmitButton = styled(motion.button)`\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border: none;\r\n  padding: 1rem 2rem;\r\n  border-radius: 25px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  font-size: 1.1rem;\r\n  margin-top: 1rem;\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst MatchGame = ({ question, onSubmit }) => {\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [matchedPairs, setMatchedPairs] = useState([]);\r\n  const [wrongPairs, setWrongPairs] = useState([]);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  // Parse the question to extract Tamil and English options\r\n  const parseQuestion = () => {\r\n    const isTamilToEnglish = question.question.includes('Tamil word');\r\n    const correctAnswer = question.correctAnswer;\r\n    \r\n    // For match games, we need to create pairs\r\n    // This is a simplified version - in a real app, you'd have more sophisticated parsing\r\n    const options = [];\r\n    \r\n    if (isTamilToEnglish) {\r\n      // Tamil word to English meaning\r\n      options.push({\r\n        id: 'tamil',\r\n        text: question.question.match(/\"([^\"]+)\"/)?.[1] || 'Tamil Word',\r\n        type: 'tamil'\r\n      });\r\n      options.push({\r\n        id: 'english',\r\n        text: correctAnswer,\r\n        type: 'english'\r\n      });\r\n    } else {\r\n      // English meaning to Tamil word\r\n      options.push({\r\n        id: 'english',\r\n        text: question.question.match(/\"([^\"]+)\"/)?.[1] || 'English Meaning',\r\n        type: 'english'\r\n      });\r\n      options.push({\r\n        id: 'tamil',\r\n        text: correctAnswer,\r\n        type: 'tamil'\r\n      });\r\n    }\r\n\r\n    return options;\r\n  };\r\n\r\n  const options = parseQuestion();\r\n\r\n  const handleOptionClick = (option) => {\r\n    if (isSubmitted) return;\r\n\r\n    setSelectedOptions(prev => {\r\n      if (prev.includes(option.id)) {\r\n        return prev.filter(id => id !== option.id);\r\n      } else if (prev.length < 2) {\r\n        return [...prev, option.id];\r\n      } else {\r\n        // Replace the first selection\r\n        return [prev[1], option.id];\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (selectedOptions.length !== 2) return;\r\n\r\n    setIsSubmitted(true);\r\n    \r\n    // Check if the selected pair is correct\r\n    const isCorrect = selectedOptions.includes('tamil') && selectedOptions.includes('english');\r\n    \r\n    if (isCorrect) {\r\n      setMatchedPairs(selectedOptions);\r\n      setTimeout(() => {\r\n        onSubmit(question.correctAnswer);\r\n      }, 1000);\r\n    } else {\r\n      setWrongPairs(selectedOptions);\r\n      setTimeout(() => {\r\n        onSubmit('wrong');\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const getOptionState = (option) => {\r\n    if (matchedPairs.includes(option.id)) return 'matched';\r\n    if (wrongPairs.includes(option.id)) return 'wrong';\r\n    if (selectedOptions.includes(option.id)) return 'selected';\r\n    return 'default';\r\n  };\r\n\r\n  return (\r\n    <MatchContainer>\r\n      <OptionsGrid>\r\n        {options.map((option) => (\r\n          <OptionCard\r\n            key={option.id}\r\n            selected={selectedOptions.includes(option.id)}\r\n            matched={matchedPairs.includes(option.id)}\r\n            wrong={wrongPairs.includes(option.id)}\r\n            onClick={() => handleOptionClick(option)}\r\n            whileHover={{ scale: 1.02 }}\r\n            whileTap={{ scale: 0.98 }}\r\n          >\r\n            {option.text}\r\n          </OptionCard>\r\n        ))}\r\n      </OptionsGrid>\r\n\r\n      <SubmitButton\r\n        onClick={handleSubmit}\r\n        disabled={selectedOptions.length !== 2 || isSubmitted}\r\n        whileHover={{ scale: 1.05 }}\r\n        whileTap={{ scale: 0.95 }}\r\n      >\r\n        {isSubmitted ? 'Checking...' : 'Submit Match'}\r\n      </SubmitButton>\r\n    </MatchContainer>\r\n  );\r\n};\r\n\r\nexport default MatchGame;\r\n\r\n","import React, { useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\n\r\nconst FillBlanksContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n`;\r\n\r\nconst SentenceContainer = styled.div`\r\n  background: #f8f9fa;\r\n  padding: 2rem;\r\n  border-radius: 15px;\r\n  border: 2px solid #e9ecef;\r\n  font-size: 1.2rem;\r\n  line-height: 1.6;\r\n  text-align: center;\r\n`;\r\n\r\nconst BlankInput = styled.input`\r\n  background: white;\r\n  border: 2px solid #667eea;\r\n  border-radius: 8px;\r\n  padding: 0.5rem 1rem;\r\n  font-size: 1.1rem;\r\n  font-weight: bold;\r\n  color: #333;\r\n  text-align: center;\r\n  min-width: 150px;\r\n  margin: 0 0.5rem;\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border-color: #4CAF50;\r\n    box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);\r\n  }\r\n\r\n  &.correct {\r\n    border-color: #4CAF50;\r\n    background: #e8f5e8;\r\n  }\r\n\r\n  &.wrong {\r\n    border-color: #f44336;\r\n    background: #ffebee;\r\n  }\r\n`;\r\n\r\nconst SubmitButton = styled(motion.button)`\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border: none;\r\n  padding: 1rem 2rem;\r\n  border-radius: 25px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  font-size: 1.1rem;\r\n  margin-top: 1rem;\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst HintText = styled.div`\r\n  background: #e3f2fd;\r\n  color: #1976d2;\r\n  padding: 1rem;\r\n  border-radius: 10px;\r\n  font-size: 0.9rem;\r\n  text-align: center;\r\n  border-left: 4px solid #2196f3;\r\n`;\r\n\r\nconst FillBlanksGame = ({ question, onSubmit }) => {\r\n  const [answer, setAnswer] = useState('');\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n\r\n  const handleSubmit = () => {\r\n    if (!answer.trim() || isSubmitted) return;\r\n\r\n    setIsSubmitted(true);\r\n    \r\n    // Check if the answer is correct (case-insensitive)\r\n    const correct = answer.toLowerCase().trim() === question.correctAnswer.toLowerCase().trim();\r\n    setIsCorrect(correct);\r\n    \r\n    setTimeout(() => {\r\n      onSubmit(correct ? question.correctAnswer : answer);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  // Parse the sentence to show the blank\r\n  const renderSentence = () => {\r\n    const sentence = question.question;\r\n    const blankIndex = sentence.indexOf('_____');\r\n    \r\n    if (blankIndex === -1) {\r\n      return sentence;\r\n    }\r\n\r\n    const beforeBlank = sentence.substring(0, blankIndex);\r\n    const afterBlank = sentence.substring(blankIndex + 5);\r\n\r\n    return (\r\n      <>\r\n        {beforeBlank}\r\n        <BlankInput\r\n          type=\"text\"\r\n          value={answer}\r\n          onChange={(e) => setAnswer(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"?\"\r\n          disabled={isSubmitted}\r\n          className={isSubmitted ? (isCorrect ? 'correct' : 'wrong') : ''}\r\n        />\r\n        {afterBlank}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <FillBlanksContainer>\r\n      <SentenceContainer>\r\n        {renderSentence()}\r\n      </SentenceContainer>\r\n\r\n      {!isSubmitted && (\r\n        <HintText>\r\n          💡 Type your answer in the blank above and press Enter or click Submit\r\n        </HintText>\r\n      )}\r\n\r\n      {isSubmitted && (\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          style={{ textAlign: 'center' }}\r\n        >\r\n          {isCorrect ? (\r\n            <div style={{ color: '#4CAF50', fontWeight: 'bold' }}>\r\n              ✅ Correct! The answer is: {question.correctAnswer}\r\n            </div>\r\n          ) : (\r\n            <div style={{ color: '#f44336', fontWeight: 'bold' }}>\r\n              ❌ Incorrect. The correct answer is: {question.correctAnswer}\r\n            </div>\r\n          )}\r\n        </motion.div>\r\n      )}\r\n\r\n      <SubmitButton\r\n        onClick={handleSubmit}\r\n        disabled={!answer.trim() || isSubmitted}\r\n        whileHover={{ scale: 1.05 }}\r\n        whileTap={{ scale: 0.95 }}\r\n      >\r\n        {isSubmitted ? 'Checking...' : 'Submit Answer'}\r\n      </SubmitButton>\r\n    </FillBlanksContainer>\r\n  );\r\n};\r\n\r\nexport default FillBlanksGame;\r\n\r\n","import React, { useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\n\r\nconst MCQContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst OptionButton = styled(motion.button)`\r\n  background: ${props => {\r\n    if (props.selected && props.correct) return '#4CAF50';\r\n    if (props.selected && props.wrong) return '#f44336';\r\n    if (props.correct && props.showResult) return '#4CAF50';\r\n    if (props.wrong && props.showResult) return '#f44336';\r\n    if (props.selected) return '#667eea';\r\n    return 'white';\r\n  }};\r\n  color: ${props => {\r\n    if (props.selected || props.correct || props.wrong) return 'white';\r\n    return '#333';\r\n  }};\r\n  border: 2px solid ${props => {\r\n    if (props.selected && props.correct) return '#4CAF50';\r\n    if (props.selected && props.wrong) return '#f44336';\r\n    if (props.correct && props.showResult) return '#4CAF50';\r\n    if (props.wrong && props.showResult) return '#f44336';\r\n    if (props.selected) return '#667eea';\r\n    return '#e0e0e0';\r\n  }};\r\n  padding: 1.5rem;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  text-align: left;\r\n  font-size: 1.1rem;\r\n  font-weight: 500;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  overflow: hidden;\r\n\r\n  &:hover {\r\n    border-color: #667eea;\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n  }\r\n\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst OptionLabel = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst OptionLetter = styled.div`\r\n  background: ${props => {\r\n    if (props.selected && props.correct) return 'rgba(255,255,255,0.3)';\r\n    if (props.selected && props.wrong) return 'rgba(255,255,255,0.3)';\r\n    if (props.correct && props.showResult) return 'rgba(255,255,255,0.3)';\r\n    if (props.wrong && props.showResult) return 'rgba(255,255,255,0.3)';\r\n    if (props.selected) return 'rgba(255,255,255,0.3)';\r\n    return '#f0f0f0';\r\n  }};\r\n  color: ${props => {\r\n    if (props.selected || props.correct || props.wrong) return 'white';\r\n    return '#666';\r\n  }};\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  font-size: 1.1rem;\r\n`;\r\n\r\nconst OptionText = styled.div`\r\n  flex: 1;\r\n  line-height: 1.4;\r\n`;\r\n\r\nconst ResultIcon = styled.div`\r\n  position: absolute;\r\n  top: 1rem;\r\n  right: 1rem;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst SubmitButton = styled(motion.button)`\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border: none;\r\n  padding: 1rem 2rem;\r\n  border-radius: 25px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  font-size: 1.1rem;\r\n  margin-top: 1rem;\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst MCQGame = ({ question, onSubmit }) => {\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [showResult, setShowResult] = useState(false);\r\n\r\n  const handleOptionSelect = (option) => {\r\n    if (isSubmitted) return;\r\n    setSelectedOption(option);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (!selectedOption || isSubmitted) return;\r\n\r\n    setIsSubmitted(true);\r\n    setShowResult(true);\r\n    \r\n    const isCorrect = selectedOption === question.correctAnswer;\r\n    \r\n    setTimeout(() => {\r\n      onSubmit(isCorrect ? question.correctAnswer : selectedOption);\r\n    }, 2000);\r\n  };\r\n\r\n  const getOptionState = (option) => {\r\n    if (!showResult) {\r\n      return {\r\n        selected: selectedOption === option,\r\n        correct: false,\r\n        wrong: false,\r\n      };\r\n    }\r\n\r\n    return {\r\n      selected: selectedOption === option,\r\n      correct: option === question.correctAnswer,\r\n      wrong: selectedOption === option && option !== question.correctAnswer,\r\n      showResult: true,\r\n    };\r\n  };\r\n\r\n  const getResultIcon = (option) => {\r\n    if (!showResult) return null;\r\n    \r\n    if (option === question.correctAnswer) {\r\n      return <ResultIcon>✅</ResultIcon>;\r\n    }\r\n    \r\n    if (selectedOption === option && option !== question.correctAnswer) {\r\n      return <ResultIcon>❌</ResultIcon>;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <MCQContainer>\r\n      {question.options?.map((option, index) => {\r\n        const state = getOptionState(option);\r\n        const letter = String.fromCharCode(65 + index); // A, B, C, D\r\n        \r\n        return (\r\n          <OptionButton\r\n            key={index}\r\n            onClick={() => handleOptionSelect(option)}\r\n            disabled={isSubmitted}\r\n            selected={state.selected}\r\n            correct={state.correct}\r\n            wrong={state.wrong}\r\n            showResult={state.showResult}\r\n            whileHover={{ scale: 1.02 }}\r\n            whileTap={{ scale: 0.98 }}\r\n          >\r\n            <OptionLabel>\r\n              <OptionLetter\r\n                selected={state.selected}\r\n                correct={state.correct}\r\n                wrong={state.wrong}\r\n                showResult={state.showResult}\r\n              >\r\n                {letter}\r\n              </OptionLetter>\r\n              <OptionText>{option}</OptionText>\r\n            </OptionLabel>\r\n            {getResultIcon(option)}\r\n          </OptionButton>\r\n        );\r\n      })}\r\n\r\n      <SubmitButton\r\n        onClick={handleSubmit}\r\n        disabled={!selectedOption || isSubmitted}\r\n        whileHover={{ scale: 1.05 }}\r\n        whileTap={{ scale: 0.95 }}\r\n      >\r\n        {isSubmitted ? 'Checking...' : 'Submit Answer'}\r\n      </SubmitButton>\r\n    </MCQContainer>\r\n  );\r\n};\r\n\r\nexport default MCQGame;\r\n\r\n","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Trophy, Target, Clock, RotateCcw, Home, Star } from 'lucide-react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResultContainer = styled.div`\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  padding: 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n`;\r\n\r\nconst ResultCard = styled(motion.div)`\r\n  background: white;\r\n  border-radius: 25px;\r\n  padding: 3rem 2rem;\r\n  box-shadow: 0 20px 40px rgba(0,0,0,0.3);\r\n  width: 100%;\r\n  max-width: 500px;\r\n  text-align: center;\r\n  color: #333;\r\n`;\r\n\r\nconst TrophyIcon = styled(motion.div)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  background: linear-gradient(135deg, #FFD700, #FFA500);\r\n  margin: 0 auto 2rem;\r\n  color: white;\r\n`;\r\n\r\nconst ResultTitle = styled.h1`\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  margin-bottom: 1rem;\r\n  color: #333;\r\n`;\r\n\r\nconst ScoreDisplay = styled.div`\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  padding: 1.5rem;\r\n  border-radius: 20px;\r\n  margin: 2rem 0;\r\n`;\r\n\r\nconst ScoreNumber = styled.div`\r\n  font-size: 3rem;\r\n  font-weight: bold;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst ScoreLabel = styled.div`\r\n  font-size: 1.1rem;\r\n  opacity: 0.9;\r\n`;\r\n\r\nconst StatsGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 1rem;\r\n  margin: 2rem 0;\r\n`;\r\n\r\nconst StatItem = styled.div`\r\n  background: #f8f9fa;\r\n  padding: 1.5rem;\r\n  border-radius: 15px;\r\n  text-align: center;\r\n`;\r\n\r\nconst StatIcon = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  background: #667eea;\r\n  color: white;\r\n  margin: 0 auto 1rem;\r\n`;\r\n\r\nconst StatValue = styled.div`\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst StatLabel = styled.div`\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst PerformanceMessage = styled.div`\r\n  background: ${props => {\r\n    const accuracy = props.accuracy;\r\n    if (accuracy >= 80) return '#e8f5e8';\r\n    if (accuracy >= 60) return '#fff3e0';\r\n    return '#ffebee';\r\n  }};\r\n  color: ${props => {\r\n    const accuracy = props.accuracy;\r\n    if (accuracy >= 80) return '#2e7d32';\r\n    if (accuracy >= 60) return '#f57c00';\r\n    return '#c62828';\r\n  }};\r\n  padding: 1rem;\r\n  border-radius: 15px;\r\n  margin: 1.5rem 0;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst ButtonGroup = styled.div`\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin-top: 2rem;\r\n`;\r\n\r\nconst ActionButton = styled(motion.button)`\r\n  flex: 1;\r\n  padding: 1rem;\r\n  border-radius: 15px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  border: none;\r\n  font-size: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 0.5rem;\r\n\r\n  &.primary {\r\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n    color: white;\r\n  }\r\n\r\n  &.secondary {\r\n    background: #f0f0f0;\r\n    color: #666;\r\n  }\r\n`;\r\n\r\nconst GameResult = ({ result, onPlayAgain, onBackToDashboard }) => {\r\n  const navigate = useNavigate();\r\n  \r\n  const accuracy = parseFloat(result.accuracy);\r\n  const totalScore = result.totalScore;\r\n  const correctAnswers = result.correctAnswers;\r\n  const totalQuestions = result.totalQuestions;\r\n  const timeSpent = result.timeSpent;\r\n\r\n  const getPerformanceMessage = () => {\r\n    if (accuracy >= 90) return \"🏆 Outstanding! You're a Tamil word master!\";\r\n    if (accuracy >= 80) return \"🌟 Excellent work! Keep it up!\";\r\n    if (accuracy >= 70) return \"👍 Good job! You're improving!\";\r\n    if (accuracy >= 60) return \"📚 Not bad! Practice makes perfect!\";\r\n    return \"💪 Keep practicing! You'll get better!\";\r\n  };\r\n\r\n  const getTrophyColor = () => {\r\n    if (accuracy >= 90) return \"#FFD700\";\r\n    if (accuracy >= 80) return \"#C0C0C0\";\r\n    if (accuracy >= 70) return \"#CD7F32\";\r\n    return \"#8B4513\";\r\n  };\r\n\r\n  return (\r\n    <ResultContainer>\r\n      <ResultCard\r\n        initial={{ scale: 0.8, opacity: 0 }}\r\n        animate={{ scale: 1, opacity: 1 }}\r\n        transition={{ duration: 0.5 }}\r\n      >\r\n        <TrophyIcon\r\n          initial={{ rotate: -180, scale: 0 }}\r\n          animate={{ rotate: 0, scale: 1 }}\r\n          transition={{ delay: 0.3, duration: 0.8 }}\r\n        >\r\n          <Trophy size={50} />\r\n        </TrophyIcon>\r\n\r\n        <ResultTitle>Game Complete!</ResultTitle>\r\n\r\n        <ScoreDisplay>\r\n          <ScoreNumber>{totalScore}</ScoreNumber>\r\n          <ScoreLabel>Total Points</ScoreLabel>\r\n        </ScoreDisplay>\r\n\r\n        <StatsGrid>\r\n          <StatItem>\r\n            <StatIcon>\r\n              <Target size={24} />\r\n            </StatIcon>\r\n            <StatValue>{correctAnswers}/{totalQuestions}</StatValue>\r\n            <StatLabel>Correct Answers</StatLabel>\r\n          </StatItem>\r\n\r\n          <StatItem>\r\n            <StatIcon>\r\n              <Clock size={24} />\r\n            </StatIcon>\r\n            <StatValue>{Math.floor(timeSpent / 60)}:{(timeSpent % 60).toString().padStart(2, '0')}</StatValue>\r\n            <StatLabel>Time Spent</StatLabel>\r\n          </StatItem>\r\n        </StatsGrid>\r\n\r\n        <PerformanceMessage accuracy={accuracy}>\r\n          {getPerformanceMessage()}\r\n        </PerformanceMessage>\r\n\r\n        <ButtonGroup>\r\n          <ActionButton\r\n            className=\"secondary\"\r\n            onClick={onBackToDashboard}\r\n            whileHover={{ scale: 1.05 }}\r\n            whileTap={{ scale: 0.95 }}\r\n          >\r\n            <Home size={20} />\r\n            Dashboard\r\n          </ActionButton>\r\n\r\n          <ActionButton\r\n            className=\"primary\"\r\n            onClick={onPlayAgain}\r\n            whileHover={{ scale: 1.05 }}\r\n            whileTap={{ scale: 0.95 }}\r\n          >\r\n            <RotateCcw size={20} />\r\n            Play Again\r\n          </ActionButton>\r\n        </ButtonGroup>\r\n      </ResultCard>\r\n    </ResultContainer>\r\n  );\r\n};\r\n\r\nexport default GameResult;\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { useGame } from '../contexts/GameContext';\nimport { ArrowLeft, Clock, Target, CheckCircle, XCircle } from 'lucide-react';\nimport styled from 'styled-components';\nimport MatchGame from '../components/games/MatchGame';\nimport FillBlanksGame from '../components/games/FillBlanksGame';\nimport MCQGame from '../components/games/MCQGame';\nimport GameResult from '../components/games/GameResult';\n\nconst GameContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst GameHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n  color: white;\n`;\n\nconst BackButton = styled(motion.button)`\n  background: rgba(255,255,255,0.2);\n  border: none;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  cursor: pointer;\n  backdrop-filter: blur(10px);\n`;\n\nconst GameInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n`;\n\nconst InfoItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(255,255,255,0.2);\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  backdrop-filter: blur(10px);\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 8px;\n  background: rgba(255,255,255,0.2);\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 2rem;\n`;\n\nconst ProgressFill = styled(motion.div)`\n  height: 100%;\n  background: linear-gradient(90deg, #4CAF50, #8BC34A);\n  border-radius: 4px;\n`;\n\nconst GameContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst QuestionCard = styled(motion.div)`\n  background: white;\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n  width: 100%;\n  max-width: 600px;\n  margin-bottom: 2rem;\n`;\n\nconst QuestionNumber = styled.div`\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  display: inline-block;\n`;\n\nconst QuestionText = styled.h2`\n  font-size: 1.5rem;\n  color: #333;\n  margin-bottom: 1.5rem;\n  line-height: 1.4;\n  text-align: center;\n`;\n\nconst GameTypeIndicator = styled.div`\n  background: ${props => {\n    switch(props.gameType) {\n      case 'match': return '#4CAF50';\n      case 'fill_blanks': return '#FF9800';\n      case 'mcq': return '#2196F3';\n      default: return '#666';\n    }\n  }};\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 15px;\n  font-size: 0.8rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  display: inline-block;\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 50vh;\n  color: white;\n`;\n\nconst LoadingSpinner = styled(motion.div)`\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(255,255,255,0.3);\n  border-top: 3px solid white;\n  border-radius: 50%;\n  margin-bottom: 1rem;\n`;\n\nconst Game = () => {\n  const navigate = useNavigate();\n  const {\n    currentGame,\n    gameResult,\n    loading,\n    getCurrentQuestion,\n    isGameCompleted,\n    getGameProgress,\n    getCurrentScore,\n    getCorrectAnswersCount,\n    submitAnswer,\n    completeGame,\n    resetGame,\n  } = useGame();\n\n  const [questionStartTime, setQuestionStartTime] = useState(Date.now());\n\n  useEffect(() => {\n    if (!currentGame && !gameResult) {\n      navigate('/game-selection');\n    }\n  }, [currentGame, gameResult, navigate]);\n\n  useEffect(() => {\n    if (currentGame) {\n      setQuestionStartTime(Date.now());\n    }\n  }, [currentGame?.currentQuestionIndex]);\n\n  const handleAnswerSubmit = async (answer) => {\n    const currentQuestion = getCurrentQuestion();\n    if (!currentQuestion) return;\n\n    const timeSpent = Math.floor((Date.now() - questionStartTime) / 1000);\n    \n    try {\n      await submitAnswer(currentQuestion.questionId, answer, timeSpent);\n    } catch (error) {\n      console.error('Failed to submit answer:', error);\n    }\n  };\n\n  const handleGameComplete = async () => {\n    try {\n      await completeGame();\n    } catch (error) {\n      console.error('Failed to complete game:', error);\n    }\n  };\n\n  const handleBackToSelection = () => {\n    resetGame();\n    navigate('/game-selection');\n  };\n\n  const handlePlayAgain = () => {\n    resetGame();\n    navigate('/game-selection');\n  };\n\n  if (loading) {\n    return (\n      <GameContainer>\n        <LoadingContainer>\n          <LoadingSpinner\n            animate={{ rotate: 360 }}\n            transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n          />\n          <p>Loading game...</p>\n        </LoadingContainer>\n      </GameContainer>\n    );\n  }\n\n  if (gameResult) {\n    return (\n      <GameResult\n        result={gameResult}\n        onPlayAgain={handlePlayAgain}\n        onBackToDashboard={() => navigate('/dashboard')}\n      />\n    );\n  }\n\n  if (!currentGame) {\n    return (\n      <GameContainer>\n        <LoadingContainer>\n          <p>No active game found</p>\n          <button onClick={handleBackToSelection}>Back to Game Selection</button>\n        </LoadingContainer>\n      </GameContainer>\n    );\n  }\n\n  const currentQuestion = getCurrentQuestion();\n  const progress = getGameProgress();\n  const currentScore = getCurrentScore();\n  const correctCount = getCorrectAnswersCount();\n\n  const getGameTypeLabel = (type) => {\n    switch(type) {\n      case 'match': return 'Match the Following';\n      case 'fill_blanks': return 'Fill in the Blanks';\n      case 'mcq': return 'Multiple Choice';\n      default: return 'Game';\n    }\n  };\n\n  return (\n    <GameContainer>\n      <GameHeader>\n        <BackButton\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={handleBackToSelection}\n        >\n          <ArrowLeft size={24} />\n        </BackButton>\n\n        <GameInfo>\n          <InfoItem>\n            <Target size={16} />\n            <span>{currentScore} pts</span>\n          </InfoItem>\n          <InfoItem>\n            <CheckCircle size={16} />\n            <span>{correctCount}/{currentGame.totalQuestions}</span>\n          </InfoItem>\n        </GameInfo>\n      </GameHeader>\n\n      <ProgressBar>\n        <ProgressFill\n          initial={{ width: 0 }}\n          animate={{ width: `${progress}%` }}\n          transition={{ duration: 0.5 }}\n        />\n      </ProgressBar>\n\n      <GameContent>\n        <AnimatePresence mode=\"wait\">\n          {currentQuestion && (\n            <QuestionCard\n              key={currentGame.currentQuestionIndex}\n              initial={{ opacity: 0, x: 50 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -50 }}\n              transition={{ duration: 0.3 }}\n            >\n              <GameTypeIndicator gameType={currentGame.gameType}>\n                {getGameTypeLabel(currentGame.gameType)}\n              </GameTypeIndicator>\n              \n              <QuestionNumber>\n                Question {currentGame.currentQuestionIndex + 1} of {currentGame.totalQuestions}\n              </QuestionNumber>\n\n              <QuestionText>{currentQuestion.question}</QuestionText>\n\n              {currentGame.gameType === 'match' && (\n                <MatchGame\n                  question={currentQuestion}\n                  onSubmit={handleAnswerSubmit}\n                />\n              )}\n\n              {currentGame.gameType === 'fill_blanks' && (\n                <FillBlanksGame\n                  question={currentQuestion}\n                  onSubmit={handleAnswerSubmit}\n                />\n              )}\n\n              {currentGame.gameType === 'mcq' && (\n                <MCQGame\n                  question={currentQuestion}\n                  onSubmit={handleAnswerSubmit}\n                />\n              )}\n            </QuestionCard>\n          )}\n        </AnimatePresence>\n\n        {isGameCompleted() && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            style={{ textAlign: 'center', color: 'white' }}\n          >\n            <h3>All questions completed!</h3>\n            <p>Final Score: {currentScore} points</p>\n            <button\n              onClick={handleGameComplete}\n              style={{\n                background: 'white',\n                color: '#667eea',\n                border: 'none',\n                padding: '1rem 2rem',\n                borderRadius: '25px',\n                fontWeight: 'bold',\n                cursor: 'pointer',\n                marginTop: '1rem',\n              }}\n            >\n              Complete Game\n            </button>\n          </motion.div>\n        )}\n      </GameContent>\n    </GameContainer>\n  );\n};\n\nexport default Game;\n"],"names":["MatchContainer","styled","div","_templateObject","_taggedTemplateLiteral","OptionsGrid","_templateObject2","OptionCard","motion","_templateObject3","props","selected","matched","wrong","SubmitButton","button","_templateObject4","_ref","question","onSubmit","selectedOptions","setSelectedOptions","useState","matchedPairs","setMatchedPairs","wrongPairs","setWrongPairs","isSubmitted","setIsSubmitted","options","parseQuestion","isTamilToEnglish","includes","correctAnswer","_question$question$ma","_question$question$ma2","push","id","text","match","type","_jsxs","children","_jsx","map","option","onClick","prev","filter","length","handleOptionClick","whileHover","scale","whileTap","handleSubmit","setTimeout","disabled","FillBlanksContainer","SentenceContainer","BlankInput","input","HintText","_templateObject5","answer","setAnswer","isCorrect","setIsCorrect","trim","correct","toLowerCase","handleKeyPress","e","key","renderSentence","sentence","blankIndex","indexOf","beforeBlank","substring","afterBlank","_Fragment","value","onChange","target","onKeyPress","placeholder","className","initial","opacity","y","animate","style","textAlign","color","fontWeight","MCQContainer","OptionButton","showResult","OptionLabel","OptionLetter","OptionText","ResultIcon","_templateObject6","_templateObject7","_question$options","selectedOption","setSelectedOption","setShowResult","getResultIcon","index","state","getOptionState","letter","String","fromCharCode","handleOptionSelect","ResultContainer","ResultCard","TrophyIcon","ResultTitle","h1","ScoreDisplay","ScoreNumber","ScoreLabel","StatsGrid","_templateObject8","StatItem","_templateObject9","StatIcon","_templateObject0","StatValue","_templateObject1","StatLabel","_templateObject10","PerformanceMessage","_templateObject11","accuracy","ButtonGroup","_templateObject12","ActionButton","_templateObject13","result","onPlayAgain","onBackToDashboard","useNavigate","parseFloat","totalScore","correctAnswers","totalQuestions","timeSpent","transition","duration","rotate","delay","Trophy","size","Target","Clock","Math","floor","toString","padStart","Home","RotateCcw","GameContainer","GameHeader","BackButton","GameInfo","InfoItem","ProgressBar","ProgressFill","GameContent","QuestionCard","QuestionNumber","QuestionText","h2","GameTypeIndicator","gameType","LoadingContainer","LoadingSpinner","Game","navigate","currentGame","gameResult","loading","getCurrentQuestion","isGameCompleted","getGameProgress","getCurrentScore","getCorrectAnswersCount","submitAnswer","completeGame","resetGame","useGame","questionStartTime","setQuestionStartTime","Date","now","useEffect","currentQuestionIndex","handleAnswerSubmit","async","currentQuestion","questionId","error","console","handleBackToSelection","handlePlayAgain","repeat","Infinity","ease","GameResult","progress","currentScore","correctCount","ArrowLeft","CheckCircle","width","concat","AnimatePresence","mode","x","exit","getGameTypeLabel","MatchGame","FillBlanksGame","MCQGame","background","border","padding","borderRadius","cursor","marginTop"],"sourceRoot":""}